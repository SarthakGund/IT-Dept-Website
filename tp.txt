import React, { useEffect, useRef, useState } from "react";

const AboutUs = () => {
  const trackRef = useRef(null);
  const [currentIndex, setCurrentIndex] = useState(0);

  const images = [
    "https://www.djsce.ac.in/home_banners/18_HPHeader_AI-Bhargav-Desai.jpg",
    "https://www.djsce.ac.in/home_banners/14_HPHeader_14_HPHeader_vice%20chancellors%20challenge_first%20Prize_Rakesh%20Patel.jpg",
    "https://www.djsce.ac.in/home_banners/Ranbir%20Allahabadia.jpg",
    "https://www.djsce.ac.in/home_banners/Frame%20183.png",
    "https://www.djsce.ac.in/home_banners/Frame%20184.png",
  ];

  const totalItems = images.length;

  // Clone images for infinite scrolling
  const clonedImages = [...images, ...images, ...images];

  const itemWidth = 300; // Adjust based on image width
  const spacing = 24; // Adjust for margin
  const totalWidth = clonedImages.length * (itemWidth + spacing);

  useEffect(() => {
    // Initialize carousel position
    const track = trackRef.current;
    const initialIndex = totalItems; // Start at the first real set
    setCurrentIndex(initialIndex);
    track.style.transform = translateX(-${initialIndex * (itemWidth + spacing)}px);
  }, [totalItems]);

  const updateCarousel = (index) => {
    const track = trackRef.current;
    const translateX = -index * (itemWidth + spacing);
    track.style.transition = "transform 0.5s ease-in-out";
    track.style.transform = translateX(${translateX}px);
  };

  const handleNext = () => {
    const track = trackRef.current;
    const nextIndex = currentIndex + 1;
    setCurrentIndex(nextIndex);
    updateCarousel(nextIndex);

    if (nextIndex === totalItems * 2) {
      // Reset to the first real set after animation
      setTimeout(() => {
        track.style.transition = "none";
        setCurrentIndex(totalItems);
        track.style.transform = translateX(-${totalItems * (itemWidth + spacing)}px);
      }, 500);
    }
  };

  const handlePrev = () => {
    const track = trackRef.current;
    const prevIndex = currentIndex - 1;
    setCurrentIndex(prevIndex);
    updateCarousel(prevIndex);

    if (prevIndex === totalItems - 1) {
      // Reset to the last real set after animation
      setTimeout(() => {
        track.style.transition = "none";
        setCurrentIndex(totalItems * 2 - 1);
        track.style.transform = translateX(-${(totalItems * 2 - 1) * (itemWidth + spacing)}px);
      }, 500);
    }
  };

  return (
    <div className="py-12 px-6 md:px-12">
      <h2 className="text-2xl font-bold text-center mb-6">Gallery</h2>
      <div className="relative flex items-center justify-center overflow-hidden">
        {/* Carousel Track */}
        <div
          ref={trackRef}
          className="flex transition-transform"
          style={{ width: totalWidth }}
        >
          {clonedImages.map((src, index) => (
            <img
              key={index}
              src={src}
              alt={Event ${index}}
              className="rounded-lg shadow-lg mx-2"
              style={{ width: itemWidth }}
            />
          ))}
        </div>
        {/* Controls */}
        <button
          onClick={handlePrev}
          className="absolute left-2 bg-white text-black p-2 rounded-full shadow-md"
        >
          ❮
        </button>
        <button
          onClick={handleNext}
          className="absolute right-2 bg-white text-black p-2 rounded-full shadow-md"
        >
          ❯
        </button>
      </div>
    </div>
  );
};

export default AboutUs;